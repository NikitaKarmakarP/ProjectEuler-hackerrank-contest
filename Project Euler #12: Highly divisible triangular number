#include <iostream>
#include <cmath>
#include <unordered_map>
using namespace std;

// Function to count the number of divisors using prime factorization
int countDivisors(long long n) {
    int count = 1;
    for (long long i = 2; i * i <= n; i++) {
        int exponent = 0;
        while (n % i == 0) {
            exponent++;
            n /= i;
        }
        count *= (exponent + 1);
    }
    if (n > 1) count *= 2;  // If there's a remaining prime factor
    return count;
}

// Function to find the first triangle number with more than d divisors
long long firstTriangleWithDivisors(int d) {
    long long n = 1, triangleNumber = 1;
    while (true) {
        long long n1 = (n % 2 == 0) ? n / 2 : n;    // n/2 to keep factors small
        long long n2 = (n + 1) % 2 == 0 ? (n + 1) / 2 : (n + 1);

        // Divisors of T_n = divisors(n/2) * divisors(n+1) OR divisors(n) * divisors((n+1)/2)
        int divisorCount = countDivisors(n1) * countDivisors(n2);
        if (divisorCount > d) return triangleNumber;

        n++;
        triangleNumber += n;
    }
}

int main() {
    int t, d;
    cin >> t;  // Number of test cases
    while (t--) {
        cin >> d;
        cout << firstTriangleWithDivisors(d) << endl;
    }
    return 0;
}
