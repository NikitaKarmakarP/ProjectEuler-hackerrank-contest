#include <iostream>
#include <vector>
using namespace std;

// Function to find the maximum path sum
int maxPathSum(vector<vector<int>>& triangle, int n) {
    for (int row = n - 2; row >= 0; row--) {
        for (int col = 0; col <= row; col++) {
            // Update the current cell to be the sum of itself and the maximum of the two below it
            triangle[row][col] += max(triangle[row + 1][col], triangle[row + 1][col + 1]);
        }
    }
    return triangle[0][0]; // The top element now contains the max path sum
}

int main() {
    int T; // Number of test cases
    cin >> T;

    while (T--) {
        int n;
        cin >> n;
        vector<vector<int>> triangle(n);

        // Read the triangle
        for (int i = 0; i < n; i++) {
            triangle[i].resize(i + 1);
            for (int j = 0; j <= i; j++) {
                cin >> triangle[i][j];
            }
        }

        // Compute and print the maximum path sum
        cout << maxPathSum(triangle, n) << endl;
    }

    return 0;
}
