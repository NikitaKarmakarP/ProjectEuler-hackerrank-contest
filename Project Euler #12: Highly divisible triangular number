#include <iostream>
#include <cmath>
using namespace std;

// Function to count divisors of a number efficiently
int countDivisors(long long n) {
    int count = 0;
    for (long long i = 1; i * i <= n; i++) {
        if (n % i == 0) {
            count += 2; // Both i and (n / i) are divisors
            if (i * i == n) count--; // If it's a perfect square, count only once
        }
    }
    return count;
}

// Function to find the first triangle number with more than N divisors
long long findTriangleNumber(int N) {
    long long index = 1, triangle = 1;
    while (countDivisors(triangle) <= N) {
        index++;
        triangle += index; // T_n = T_(n-1) + n
    }
    return triangle;
}

int main() {
    int T, N;
    cin >> T;
    while (T--) {
        cin >> N;
        cout << findTriangleNumber(N) << endl;
    }
    return 0;
}
