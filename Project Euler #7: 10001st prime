#include <iostream>
#include <vector>

using namespace std;

const int LIMIT = 1000000; // Upper bound for prime computation
vector<int> primes;

// Sieve of Eratosthenes to find prime numbers up to LIMIT
void generatePrimes() {
    vector<bool> isPrime(LIMIT + 1, true);
    isPrime[0] = isPrime[1] = false; // 0 and 1 are not prime

    for (int i = 2; i * i <= LIMIT; i++) {
        if (isPrime[i]) {
            for (int j = i * i; j <= LIMIT; j += i) {
                isPrime[j] = false;
            }
        }
    }

    // Store all prime numbers in a list
    for (int i = 2; i <= LIMIT && primes.size() < 100000; i++) {
        if (isPrime[i]) {
            primes.push_back(i);
        }
    }
}

int main() {
    generatePrimes(); // Precompute primes

    int t;
    cin >> t; // Number of test cases

    while (t--) {
        int n;
        cin >> n;
        cout << primes[n - 1] << endl; // Output nth prime (0-based index)
    }

    return 0;
}
